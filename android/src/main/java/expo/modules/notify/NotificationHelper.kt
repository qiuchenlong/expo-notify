package expo.modules.notify

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.drawable.Drawable
import android.net.Uri
import android.os.Build
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.net.toUri
import com.bumptech.glide.Glide
import com.bumptech.glide.request.target.CustomTarget
import com.bumptech.glide.request.transition.Transition
import expo.modules.notify.bean.PushNotification

class NotificationHelper(private val context: Context) {
    private val channelId = "mqtt_notifications" // ÈÄöÁü•Ê∏†ÈÅì ID
    private val notificationId = 1001 // ÈÄöÁü• ID

    init {
        createNotificationChannel() // ÂàõÂª∫ÈÄöÁü•Ê∏†ÈÅì
    }

    /** ÂàõÂª∫ÈÄöÁü•Ê∏†ÈÅìÔºàÈÄÇÁî®‰∫é Android 8.0+Ôºâ*/
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                channelId,
                "MQTT ÈÄöÁü•",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "MQTT Ê∂àÊÅØÈÄöÁü•"
            }

            val notificationManager =
                context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    /** ÊòæÁ§∫ÈÄöÁü• */
    fun showNotification(title: String, message: String) {
        val intent = Intent(context, ExpoNotificationActivity::class.java).apply {
//            setClassName("expo.modules.notify.example", "expo.modules.notify.example.MainActivity")
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("mqtt_message", message) // üî• ‰º†ÈÄí MQTT Êé®ÈÄÅÊ∂àÊÅØ
        }
        val pendingIntent = PendingIntent.getActivity(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(android.R.drawable.ic_dialog_info)
            .setContentTitle(title)
            .setContentText(message)
            .setAutoCancel(true)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setDefaults(Notification.DEFAULT_ALL) // ÂìçÈìÉ + ÈúáÂä®
            .setContentIntent(pendingIntent)
            .build()

        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(notificationId, notification)
    }

    /** ÊòæÁ§∫ÈÄöÁü•ÔºàÊ∑±Â∫¶ÈìæÊé•Ôºâ */
    fun showNotificationByDeepLink(topic: String, pushNotification: PushNotification) {
        val title = pushNotification.title
        val message = pushNotification.body
        val deeplink = pushNotification.data.deeplink
        val smallIconId = pushNotification.options.smallIconId?.takeIf { it.isNotEmpty() }
        val largeIconId = pushNotification.options.largeIconId?.takeIf { it.isNotEmpty() }
        val largeIconUrl = pushNotification.options.largeIconUrl?.takeIf { it.isNotEmpty() }

        val intent = Intent(Intent.ACTION_VIEW).apply {
            data = deeplink.toUri()
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        val pendingIntent = PendingIntent.getActivity(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // ‰ªé JSON Ëé∑ÂèñÂõæÊ†áÂ≠óÊÆµ
        val iconName = smallIconId ?: "ic_android_logo"
        val iconResId = getIconResource(context, iconName)

        val builder = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(iconResId)
            .setContentTitle(title)
            .setContentText(message)
            .setAutoCancel(true)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setDefaults(Notification.DEFAULT_ALL) // ÂìçÈìÉ + ÈúáÂä®
            .setContentIntent(pendingIntent)

        // **Â§ÑÁêÜ largeIcon ÈÄªËæë**
        when {
            // **ÊÉÖÂÜµ 1Ôºö‰ΩøÁî®ÁΩëÁªúÂõæÁâá**
            largeIconUrl != null -> {
                Glide.with(context)
                    .asBitmap()
                    .load(largeIconUrl)
                    .into(object : CustomTarget<Bitmap>() {
                        override fun onResourceReady(resource: Bitmap, transition: Transition<in Bitmap>?) {
                            builder.setLargeIcon(resource)
                            val notification = builder.build()
                            val notificationManager =
                                context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                            notificationManager.notify(notificationId, notification)
                        }

                        override fun onLoadCleared(placeholder: Drawable?) {}
                    })
            }

            // **ÊÉÖÂÜµ 2ÔºölargeIconUrl ‰∏∫Á©∫‰ΩÜ largeIconId Â≠òÂú®Ôºå‰ªéËµÑÊ∫êÊñá‰ª∂Âä†ËΩΩ**
            largeIconId != null -> {
                val largeIconResId = getIconResource(context, largeIconId)
                val largeIconBitmap = BitmapFactory.decodeResource(context.resources, largeIconResId)
                builder.setLargeIcon(largeIconBitmap)
                val notification = builder.build()
                val notificationManager =
                    context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                notificationManager.notify(notificationId, notification)
            }

            // **ÊÉÖÂÜµ 3ÔºölargeIconUrl Âíå largeIconId ÈÉΩ‰∏∫Á©∫ÔºåÁõ¥Êé•ÂèëÈÄÅÈÄöÁü•**
            else -> {
                val notification = builder.build()
                val notificationManager =
                    context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                notificationManager.notify(notificationId, notification)
            }
        }

    }

    /** Ëé∑ÂèñIconËµÑÊ∫ê */
    fun getIconResource(context: Context, iconName: String): Int {
        return context.resources.getIdentifier(iconName, "drawable", context.packageName)
    }

}